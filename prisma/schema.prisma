generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email         String   @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  id            String   @id @default(uuid()) @db.Uuid
  createdEvents Event[]
}

model InstagramFeed {
  title             String
  description       String?
  displayOnHomepage Boolean                @default(true)
  postLimit         Int                    @default(12)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  id                String                 @id @default(uuid()) @db.Uuid
  integrations      InstagramIntegration[]
}

model InstagramIntegration {
  accountName       String
  accessToken       String
  tokenExpiryDate   DateTime
  lastFetchDateTime DateTime
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  id                String         @id @default(uuid()) @db.Uuid
  feedId            String?        @db.Uuid
  feed              InstagramFeed? @relation(fields: [feedId], references: [id])

  @@index([feedId])
}

model Event {
  title           String
  description     String
  eventType       EventType
  startDateTime   DateTime
  endDateTime     DateTime
  location        String
  isPublished     Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  imageUrl        String?
  registrationUrl String?
  embedCode       String?
  id              String    @id @default(uuid()) @db.Uuid
  createdById     String    @db.Uuid
  createdBy       User      @relation(fields: [createdById], references: [id])

  @@index([startDateTime])
  @@index([eventType])
  @@index([isPublished])
  @@index([createdById])
}

enum UserRole {
  ADMIN
  STAFF
  VOLUNTEER
  DONOR
}

enum EventType {
  TOY_DRIVE
  FOOD_DRIVE
  FUNDRAISER
  OTHER
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  ACH
  OTHER
}
