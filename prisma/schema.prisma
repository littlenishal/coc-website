
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STAFF
  VOLUNTEER
  DONOR
}

enum EventType {
  TOY_DRIVE
  FOOD_DRIVE
  FUNDRAISER
  OTHER
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  ACH
  OTHER
}

enum RegistrationStatus {
  REGISTERED
  WAITLISTED
  CANCELLED
  ATTENDED
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  role        UserRole
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdEvents Event[]
  registrations EventRegistration[]
  comments    EventComment[]
}

model InstagramFeed {
  id                String               @id @default(uuid())
  title             String
  description       String?
  displayOnHomepage Boolean              @default(true)
  postLimit         Int                  @default(12)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  integrations      InstagramIntegration[]
}

model InstagramIntegration {
  id               String        @id @default(uuid())
  accountName      String
  accessToken      String
  tokenExpiryDate  DateTime
  lastFetchDateTime DateTime
  isActive         Boolean       @default(true)
  feedId           String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  feed             InstagramFeed? @relation(fields: [feedId], references: [id])

  @@index([feedId])
}

model Event {
  id               String      @id @default(uuid())
  title            String
  description      String
  eventType        EventType
  startDateTime    DateTime
  endDateTime      DateTime?
  location         String
  address          String?
  imageUrl         String?
  registrationUrl  String?
  isPublished      Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  createdById      String
  creator          User        @relation(fields: [createdById], references: [id])
  registrations    EventRegistration[]
  comments         EventComment[]

  @@index([createdById])
}

model EventRegistration {
  id                  String             @id @default(uuid())
  eventId             String
  userId              String
  status              RegistrationStatus @default(REGISTERED)
  registeredAt        DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  numberOfGuests      Int                @default(0)
  specialRequirements String?
  notes               String?
  event               Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user                User               @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model EventComment {
  id        String   @id @default(uuid())
  eventId   String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
}
